{"version":3,"sources":["../index.js"],"names":["jsonServer","require","server","create","router","middlewares","defaults","render","req","res","header","Array","isArray","locals","data","json","status","success","items","_meta","totalCount","pageCount","currentPage","perPage","post","use","bodyParser","next","method","body","created_at","updated_at","rewriter","listen","console","log"],"mappings":";;AAAA,MAAMA,aAAaC,QAAQ,aAAR,CAAnB;AACA,MAAMC,SAASF,WAAWG,MAAX,EAAf;AACA,MAAMC,SAASJ,WAAWI,MAAX,CAAkB,SAAlB,CAAf;AACA,MAAMC,cAAcL,WAAWM,QAAX,EAApB;;AAEAF,OAAOG,MAAP,GAAgB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC5BA,MAAIC,MAAJ,CAAW,6BAAX,EAA0C,GAA1C;AACAD,MAAIC,MAAJ,CAAW,8BAAX,EAA2C,GAA3C;AACAD,MAAIC,MAAJ,CAAW,gCAAX,EAA6C,GAA7C;AACAD,MAAIC,MAAJ,CAAW,8BAAX,EAA2C,iCAA3C;AACAD,MAAIC,MAAJ,CAAW,gCAAX,EAA6C,iCAA7C;;AAEA,MAAIC,MAAMC,OAAN,CAAcH,IAAII,MAAJ,CAAWC,IAAzB,CAAJ,EAAoC;AAClCL,QAAIM,IAAJ,CAAS;AACRC,cAAQ,GADA;AAERC,eAAS,IAFD;AAGPH,YAAM;AACLI,eAAOT,IAAII,MAAJ,CAAWC,IADb;AAEJK,eAAO;AACLC,sBAAY,GADP;AAELC,qBAAW,CAFN;AAGLC,uBAAa,CAHR;AAILC,mBAAS;AAJJ;AAFH;AAHC,KAAT;AAaD,GAdD,MAcO;AACLd,QAAIM,IAAJ,CAAS;AACPC,cAAQ,GADD;AAEPC,eAAS,IAFF;AAGPH,YAAML,IAAII,MAAJ,CAAWC;AAHV,KAAT;AAKD;AACF,CA5BD;;AA8BAZ,OAAOsB,IAAP,CAAY,uBAAZ,EAAqC,CAAChB,GAAD,EAAMC,GAAN,KAAc;AACjDA,MAAIM,IAAJ,CAAS;AACPC,YAAQ,GADD;AAEPC,aAAS;AAFF,GAAT;AAID,CALD;;AAOAf,OAAOsB,IAAP,CAAY,kBAAZ,EAAgC,CAAChB,GAAD,EAAMC,GAAN,KAAc;AAC5CA,MAAIM,IAAJ,CAAS;AACPC,YAAQ,GADD;AAEPC,aAAS;AAFF,GAAT;AAID,CALD;;AAOAf,OAAOuB,GAAP,CAAWzB,WAAW0B,UAAtB;AACAxB,OAAOuB,GAAP,CAAW,CAACjB,GAAD,EAAMC,GAAN,EAAWkB,IAAX,KAAoB;AAC7B,MAAInB,IAAIoB,MAAJ,KAAe,MAAnB,EAA2B;AACzBpB,QAAIqB,IAAJ,CAASC,UAAT,GAAsB,UAAtB;AACAtB,QAAIqB,IAAJ,CAASE,UAAT,GAAsB,UAAtB;AACD;AACD;AACAJ;AACD,CAPD;;AASAzB,OAAOuB,GAAP,CAAWzB,WAAWgC,QAAX,CAAoB;AAC7B,uBAAqB,eADQ;AAE7B,2BAAyB,mBAFI;AAG7B,kBAAgB,UAHa;AAI7B,sBAAoB;AAJS,CAApB,CAAX;;AAOA9B,OAAOuB,GAAP,CAAWpB,WAAX;AACAH,OAAOuB,GAAP,CAAWrB,MAAX;AACAF,OAAO+B,MAAP,CAAc,IAAd,EAAoB,SAApB,EAA+B,MAAM;AACnCC,UAAQC,GAAR,CAAY,wBAAZ;AACD,CAFD","file":"index.js","sourcesContent":["const jsonServer = require('json-server')\nconst server = jsonServer.create()\nconst router = jsonServer.router('db.json')\nconst middlewares = jsonServer.defaults()\n\nrouter.render = (req, res) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Headers', '*');\n  res.header('Access-Control-Request-Headers', '*');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.header('Access-Control-Request-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n\n  if (Array.isArray(res.locals.data)) {\n    res.json({\n    \tstatus: 200,\n    \tsuccess: true,\n      data: {\n      \titems: res.locals.data,\n        _meta: {\n          totalCount: 100,\n          pageCount: 5,\n          currentPage: 1,\n          perPage: 20\n        }\n      }\n    })\n  } else {\n    res.json({\n      status: 200,\n      success: true,\n      data: res.locals.data\n    })\n  }\n}\n\nserver.post('/api/satuan_kerja/:id', (req, res) => {\n  res.json({\n    status: 200,\n    success: true\n  })\n})\n\nserver.post('/api/jabatan/:id', (req, res) => {\n  res.json({\n    status: 200,\n    success: true\n  })\n})\n\nserver.use(jsonServer.bodyParser)\nserver.use((req, res, next) => {\n  if (req.method === 'POST') {\n    req.body.created_at = 1554076800\n    req.body.updated_at = 1554076800\n  }\n  // Continue to JSON Server router\n  next()\n})\n\nserver.use(jsonServer.rewriter({\n  '/api/satuan-kerja': '/satuan-kerja',\n  '/api/satuan-kerja/:id': '/satuan-kerja/:id',\n  '/api/jabatan': '/jabatan',\n  '/api/jabatan/:id': '/jabatan/:id',\n}))\n\nserver.use(middlewares)\nserver.use(router)\nserver.listen(3000, '0.0.0.0', () => {\n  console.log('JSON Server is running')\n})\n"]}